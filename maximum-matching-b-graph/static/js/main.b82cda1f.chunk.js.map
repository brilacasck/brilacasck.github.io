{"version":3,"sources":["data.js","maxMatchingBi.js","App.js","index.js","forkme.png"],"names":["graphData","a","b","c","d","e","f","g","h","MMB","_this","this","Object","classCallCheck","bfs","graph","matching","nodes","layers","layer","Set","toConsumableArray","forEach","vertex","add","push","visited","length","new_layer","layer_entries","entries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","graph_vertex_entries","has","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","neighbour","err","return","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","size","new_layer_entries","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","includes","keys","String","dfs","v","index","dfs_parent","dfs_paths","path","graph_v_entries","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","setGraph","data","arguments","shuffle","list","sort","Math","random","el","values","join","split","map","parseInt","run","free_vertex_entries","Array","from","filter","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","i","App","state","active","val","id","dir","bcolor","bstyle","isHelp","clear","mmb","setState","isNaN","line","document","getElementsByClassName","concat","className","els","replace","removeLine","target","addNode","rights","len","sortNumber","name","leftLen","leftName","console","log","last","fromCharCode","charCodeAt","delNode","ell","handle","innerHTML","newGraph","getElementById","handlerSection","react_default","createElement","onClick","_this2","_this$state","title","alt","src","forkme","key","react_lineto_default","to","borderColor","borderStyle","borderWidth","fromAnchor","toAnchor","Component","ReactDOM","render","src_App_0","module","exports","__webpack_require__","p"],"mappings":"yOAWeA,SAXG,CACdC,EAAK,CAAC,GACNC,EAAK,CAAC,EAAG,GACTC,EAAK,CAAC,EAAG,GACTC,EAAK,CAAC,EAAG,EAAG,GACZC,EAAK,CAAC,EAAG,GACTC,EAAK,CAAC,EAAG,EAAG,GACZC,EAAK,CAAC,EAAG,EAAG,GACZC,EAAK,CAAC,KCHWC,EAEjB,SAAAA,IAAa,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAObG,IAAM,SAACC,EAAOC,EAAUC,GAEpB,IAAMC,EAAS,GACXC,EAAQ,IAAIC,IAChBR,OAAAS,EAAA,EAAAT,CAAKK,EAAM,IAAKK,QAAQ,SAAAC,GAEfP,EAASO,IACVJ,EAAMK,IAAID,KAGlBL,EAAOO,KAAKN,GAIZ,IAFA,IAAIO,EAAU,IAAIN,MAEN,CACRD,EAAQD,EAAOA,EAAOS,OAAO,GAC7B,IAAIC,EAAY,IAAIR,IAEdS,EAAgBV,EAAMW,UAJpBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAMR,QAAAC,EAAAC,EAAmBP,EAAnBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAiC,KAAxBR,EAAwBY,EAAAM,MAC7BlB,EAASA,EAAO,GAEhBG,EAAQF,IAAID,GACZ,IAAMmB,EAAuB3B,EAAMQ,GAAQO,UAC3C,GAAIb,EAAM,GAAG0B,IAAIpB,GAAQ,KAAAqB,GAAA,EAAAC,GAAA,EAAAC,OAAAZ,EAAA,IACrB,QAAAa,EAAAC,EAAsBN,EAAtBL,OAAAC,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAA2C,KAAlCK,EAAkCF,EAAAN,MACvCQ,EAAUA,EAAU,GACfvB,EAAQiB,IAAIM,IAAgBjC,EAASO,IAAW0B,GAAajC,EAASO,IACvEK,EAAUJ,IAAIyB,IAJD,MAAAC,GAAAL,GAAA,EAAAC,EAAAI,EAAA,YAAAN,GAAA,MAAAI,EAAAG,QAAAH,EAAAG,SAAA,WAAAN,EAAA,MAAAC,QAQrB,KAAAM,GAAA,EAAAC,GAAA,EAAAC,OAAApB,EAAA,IACA,QAAAqB,EAAAC,EAAsBd,EAAtBL,OAAAC,cAAAc,GAAAG,EAAAC,EAAAjB,QAAAC,MAAAY,GAAA,EAA2C,KAAlCH,EAAkCM,EAAAd,MACvCQ,EAAUA,EAAU,IACfvB,EAAQiB,IAAIM,IAAejC,EAASO,IAAW0B,GAAajC,EAASO,IACtEK,EAAUJ,IAAIyB,IAJtB,MAAAC,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,MAnBA,MAAAJ,GAAAlB,GAAA,EAAAC,EAAAiB,EAAA,YAAAnB,GAAA,MAAAK,EAAAe,QAAAf,EAAAe,SAAA,WAAAnB,EAAA,MAAAC,GAiCR,GAHAf,EAAOO,KAAKG,GAGU,GAAlBA,EAAU6B,KACV,OAAOvC,EAGX,IAAMwC,EAAoB9B,EAAUE,UArC5B6B,GAAA,EAAAC,GAAA,EAAAC,OAAA3B,EAAA,IAwCR,QAAA4B,EAAAC,EAAmBL,EAAnBrB,OAAAC,cAAAqB,GAAAG,EAAAC,EAAAxB,QAAAC,MAAAmB,GAAA,EAAqC,KAA5BpC,EAA4BuC,EAAArB,MAIjC,GAHAlB,EAASA,EAAO,GAGbX,OAAAS,EAAA,EAAAT,CAAKK,EAAM,IAAK+C,SAASzC,KAAaX,OAAAS,EAAA,EAAAT,CAAIA,OAAOqD,KAAKjD,IAAWgD,SAASE,OAAO3C,IAEhF,OAAOL,GA9CP,MAAAgC,GAAAU,GAAA,EAAAC,EAAAX,EAAA,YAAAS,GAAA,MAAAI,EAAAZ,QAAAY,EAAAZ,SAAA,WAAAS,EAAA,MAAAC,MArBHlD,KA4EbwD,IAAM,SAACpD,EAAOqD,EAAGC,EAAOnD,EAAQoD,EAAYC,EAAWvD,EAAUC,GAE7D,GAAa,GAAToD,EAAW,CAEX,IADA,IAAMG,EAAO,CAACJ,GACPE,EAAWF,IAAMA,GACpBI,EAAK/C,KAAK6C,EAAWF,IACrBA,EAAIE,EAAWF,GAKnB,OAHAG,EAAU9C,KAAK+C,IAGR,EAGX,IAAMC,EAAkB1D,EAAMqD,GAAGtC,UAdsC4C,GAAA,EAAAC,GAAA,EAAAC,OAAA1C,EAAA,IAevE,QAAA2C,EAAAC,EAAsBL,EAAtBpC,OAAAC,cAAAoC,GAAAG,EAAAC,EAAAvC,QAAAC,MAAAkC,GAAA,EAAsC,KAA7BzB,EAA6B4B,EAAApC,MAGlC,GAFAQ,EAAYA,EAAU,GAElB/B,EAAOmD,EAAQ,GAAG1B,IAAIM,GAAW,CACjC,GAAIqB,EAAWrB,GAAY,SAC3B,IAAKhC,EAAM,GAAG0B,IAAIM,MAAgBjC,EAASoD,IAAMnB,GAAajC,EAASoD,KAC9DnD,EAAM,GAAG0B,IAAIM,IAAejC,EAASoD,IAAMnB,GAAajC,EAASoD,MAC9DE,EAAWrB,GAAamB,EAGpB1D,EAAKyD,IAAIpD,EAAOkC,EAAWoB,EAAM,EAAGnD,EAAQoD,EAAYC,EAAWvD,EAAUC,IAC7E,OAAO,IA1BwC,MAAAiC,GAAAyB,GAAA,EAAAC,EAAA1B,EAAA,YAAAwB,GAAA,MAAAI,EAAA3B,QAAA2B,EAAA3B,SAAA,WAAAwB,EAAA,MAAAC,GA+BvE,OAAO,GA3GEjE,KAiHboE,SAAW,WAAoB,IAAnBC,EAAmBC,UAAAtD,OAAA,QAAAO,IAAA+C,UAAA,GAAAA,UAAA,GAAdjF,EACbU,EAAKK,MAAQ,GAEb,IAAMmE,EAAU,SAACC,GACb,OAAOA,EAAKC,KAAK,kBAAMC,KAAKC,SAAW,MAG3C1E,OAAOqD,KAAKe,GAAM1D,QAAQ,SAAAiE,GAAE,OAAI7E,EAAKK,MAAM,CAACwE,IAAO,IAAInE,IAAI4D,EAAKO,MAChE7E,EAAKO,MAAQ,CACT,IAAIG,IAAJR,OAAAS,EAAA,EAAAT,CAAYsE,EAAQtE,OAAOqD,KAAKvD,EAAKK,UACrC,IAAIK,IAAI8D,EAAQtE,OAAO4E,OAAOR,GAAMS,KAAK,KAAKC,MAAM,KAAKC,IAAI,SAAAJ,GAAE,OAAIK,SAASL,EAAI,SAGpF7E,EAAKO,MAAM,GAAGK,QAAQ,SAAAC,GAClBb,EAAKK,MAAMQ,GAAQD,QAAQ,SAAA2B,GACvBvC,EAAKK,MAAMkC,GAAcvC,EAAKK,MAAMkC,GAAWvC,EAAKK,MAAMkC,GAAWzB,IAAID,GAAQ,IAAIH,IAAI,CAACG,SAhIzFZ,KAwIbkF,IAAM,WAMF,IAJA,IAAM7E,EAAW,GACbE,EAAS,GAO4B,KAHrCA,EAASR,EAAKI,IAAIJ,EAAKK,MAAOC,EAAUN,EAAKO,QAGlCC,EAAOS,OAAO,GAAG8B,MAJpB,CAOR,IAAMc,EAAY,GACZD,EAAa,GAEbwB,EALQ,IAAI1E,IAAJR,OAAAS,EAAA,EAAAT,CAAYmF,MAAMC,KAAK9E,EAAOA,EAAOS,OAAO,IAAIsE,OAAO,SAAA1E,GAAM,OAAKP,EAASO,GAAe,GAAPA,MAKzDO,UAVhCoE,GAAA,EAAAC,GAAA,EAAAC,OAAAlE,EAAA,IAWR,QAAAmE,EAAAC,EAAmBR,EAAnBzD,OAAAC,cAAA4D,GAAAG,EAAAC,EAAA/D,QAAAC,MAAA0D,GAAA,EAAwC,KAA/B3E,EAA+B8E,EAAA5D,MAGpC6B,EAFA/C,EAASA,EAAO,IAEKA,EAErBb,EAAKyD,IAAIzD,EAAKK,MAAOQ,EAASL,EAAOS,OAAO,EAAIT,EAAQoD,EAAYC,EAAWvD,EAAUN,EAAKO,QAhB1F,MAAAiC,GAAAiD,GAAA,EAAAC,EAAAlD,EAAA,YAAAgD,GAAA,MAAAI,EAAAnD,QAAAmD,EAAAnD,SAAA,WAAAgD,EAAA,MAAAC,GAmBR,GAAyB,IAArB7B,EAAU5C,OAAc,MAC5B,IAAK,IAAI6C,KAAQD,EAEb,IAAK,IAAIgC,KAAT3F,OAAAS,EAAA,EAAAT,CAAkBmF,MAAMxB,EAAUC,GAAM7C,QAAQsC,SAC5CsC,EAAIX,SAASW,IAEL,IAAM,IACVvF,EAASuD,EAAUC,GAAM+B,IAAMhC,EAAUC,GAAM+B,EAAE,GACjDvF,EAASuD,EAAUC,GAAM+B,EAAE,IAAMhC,EAAUC,GAAM+B,IAMjE,OAAOvF,GA9KPL,KAAKoE,4CC2PEyB,6MAzPXC,MAAQ,CACJ1F,MAAOf,EACPgB,SAAU,GACV0F,OAAQ,CACJC,IAAK,GACLC,IAAK,EACLC,IAAK,IAETC,OAAQ,UACRC,OAAQ,QACRC,QAAQ,KAQZnB,IAAM,WACFnF,EAAKuG,QACLvG,EAAKwG,IAAInC,SAASrE,EAAK+F,MAAM1F,OAC7BL,EAAKyG,SAAS,CACVnG,SAAUN,EAAKwG,IAAIrB,MACnBiB,OAAQ,QACT,WAAM,IACE9F,EAAYN,EAAK+F,MAAjBzF,SACPJ,OAAOqD,KAAKjD,GAAUM,QAAQ,SAAAiE,GAC1B,IAAI6B,MAAMxB,SAASL,EAAI,KAAK,CACxB,IAAM8B,EAAOC,SAASC,uBAAT,GAAAC,OAAmCxG,EAASuE,GAA5C,KAAAiC,OAAmDjC,IAAM,GACtE8B,EAAKI,UAAYJ,EAAKI,UAAY,sBAMlDR,MAAQ,WACJvG,EAAKyG,SAAS,CAACnG,SAAU,GAAI8F,OAAQ,YACrC,IAAMY,EAAMJ,SAASC,uBAAuB,cAC5CxB,MAAMC,KAAK0B,GAAKpG,QAAQ,SAAAiE,GACpBA,EAAGkC,UAAUlC,EAAGkC,UAAUE,QAAQ,kBAAmB,WAI7DC,WAAa,SAAAvH,GACT,IAAMF,EAAIE,EAAEwH,OAAOJ,UAAUE,QAAQ,aAAc,MAAMjC,MAAM,KACxD3E,EAASL,EAAK+F,MAAd1F,MACPA,EAAMZ,EAAE,IAAMY,EAAMZ,EAAE,IAAI8F,OAAO,SAAAV,GAAE,OAAKA,IAAKK,SAASzF,EAAE,GAAI,IAAK,GAAGoF,IACpE7E,EAAKyG,SAAS,CAACpG,SAAQ,WACnBL,EAAKuG,aAIba,QAAU,SAACjB,GAAQ,IACR9F,EAASL,EAAK+F,MAAd1F,MACP,GAAI8F,EAgBA,CAEA,IAAIkB,EAAS,GACbnH,OAAO4E,OAAOzE,GAAOO,QAAQ,SAAAiE,GAAE,OAAIwC,EAAOnH,OAAAS,EAAA,EAAAT,CAAI,IAAIQ,IAAJ,GAAAoG,OAAA5G,OAAAS,EAAA,EAAAT,CAAYmH,GAAZnH,OAAAS,EAAA,EAAAT,CAAuB2E,QAErE,IAAMyC,GADND,EAASA,EAAO3C,KAAK1E,EAAKuH,aACPtG,OAEfuG,EADSH,EAAOC,EAAI,GAExBE,EAAOtC,SAASsC,EAAM,IAAM,EAG5B,IAAMC,EAAUvH,OAAOqD,KAAKlD,GAAOY,OAC7ByG,EAAWxH,OAAAS,EAAA,EAAAT,CAAIA,OAAOqD,KAAKlD,IAAQoH,EAAQ,GACjDE,QAAQC,IAAR,GAAAd,OAAA5G,OAAAS,EAAA,EAAAT,CAAgBG,EAAMqH,IAAtB,CAAiCF,KACjCnH,EAAMqH,GAAN,GAAAZ,OAAA5G,OAAAS,EAAA,EAAAT,CAAsBG,EAAMqH,IAA5B,CAAuCF,IACvCxH,EAAKyG,SAAS,CAACpG,SAAQ,WACnBL,EAAKuG,cAhCL,CACJ,IAAMe,EAAMpH,OAAOqD,KAAKlD,GAAOY,OACzB4G,EAAO3H,OAAAS,EAAA,EAAAT,CAAIA,OAAOqD,KAAKlD,IAAQiH,EAAI,GACrCE,EAAOK,EACLhC,EAAIgC,EAAK5G,OAAO,EACnB4G,EAAKhC,GAAK,IACT2B,EAAOA,EAAKP,QAAQ,SAAU,MAAQzD,OAAOsE,aAAaN,EAAKO,WAAWlC,GAAK,GAG/E2B,GAAc,IAElBnH,EAAMmH,GAAQ,GACdxH,EAAKyG,SAAS,CAACpG,SAAQ,WACnBL,EAAKuG,cAwBjBgB,WAAa,SAAChI,EAAGC,GACb,OAAOD,EAAEC,KAGbwI,QAAU,SAAC7B,GAAQ,IACR9F,EAASL,EAAK+F,MAAd1F,MACP,GAAI8F,EAQA,CACA,IAAIkB,EAAS,GACbnH,OAAO4E,OAAOzE,GAAOO,QAAQ,SAAAiE,GAAE,OAAIwC,EAAOnH,OAAAS,EAAA,EAAAT,CAAI,IAAIQ,IAAJ,GAAAoG,OAAA5G,OAAAS,EAAA,EAAAT,CAAYmH,GAAZnH,OAAAS,EAAA,EAAAT,CAAuB2E,QAErE,IAAMyC,GADND,EAASA,EAAO3C,KAAK1E,EAAKuH,aACPtG,OACnB,GAAS,IAANqG,EAAS,OACZ,IAAME,EAAOH,EAAOC,EAAI,GACxBpH,OAAOqD,KAAKlD,GAAO4E,IAAI,SAAAJ,GAAE,OAAIxE,EAAMwE,GAAIxE,EAAMwE,GAAIU,OAAO,SAAA0C,GAAG,OAAIA,GAAKT,EAAK,GAAGS,MAC5EjI,EAAKyG,SAAS,CAACpG,SAAQ,WACnBL,EAAKuG,cAjBL,CACJ,IAAMe,EAAMpH,OAAOqD,KAAKlD,GAAOY,OAC/B,GAAS,IAANqG,EAAS,cACLjH,EAAMH,OAAOqD,KAAKlD,GAAOiH,EAAI,IACpCtH,EAAKyG,SAAS,CAACpG,SAAQ,WACnBL,EAAKuG,cAkBjB2B,OAAS,SAACvI,GAAM,IACLqG,EAAUhG,EAAK+F,MAAfC,OACDC,EAAMtG,EAAEwH,OAAOgB,UACfjC,EAAKvG,EAAEwH,OAAOjB,GACdC,EAAMO,MAAMxB,SAASe,EAAK,KAAK,EAAE,EACvC,IAAiB,IAAbD,EAAOE,GAAQ,CACf,IAAMrB,EAAK+B,SAASC,uBAAuB,UAAU,GAErD,GADAhC,EAAGkC,UAAYlC,EAAGkC,UAAUE,QAAQ,cAAe,OAC/Cd,EAQA,YAPAnG,EAAKyG,SAAS,CACVT,OAAQ,CACJC,IAAK,GACLC,IAAK,EACLC,IAAK,MAKjBnG,EAAKuG,QAbU,IAcRlG,EAASL,EAAK+F,MAAd1F,MACD+H,EAAW,GACjBlI,OAAOqD,KAAKlD,GAAO4E,IAAI,SAAAJ,GAChBmB,EAAOC,KAAOpB,EACbuD,EAASvD,GAAT3E,OAAAS,EAAA,EAAAT,CAAmB,IAAIQ,IAAJ,GAAAoG,OAAA5G,OAAAS,EAAA,EAAAT,CAAYG,EAAMwE,IAAlB,CAAuBK,SAASe,EAAK,QAGxDmC,EAASvD,GAAMxE,EAAMwE,KAG7B7E,EAAKyG,SAAS,CACVT,OAAQ,CACJC,IAAK,GACLC,IAAK,EACLC,IAAK,IAET9F,MAAO+H,QAGX,CACA,GAAGjC,EACC,OAEJnG,EAAKyG,SAAS,CAACT,OAAQ,CAACG,MAAKD,KAAID,SACjC,IAAMpB,EAAK+B,SAASyB,eAAe1I,EAAEwH,OAAOjB,IAC5CrB,EAAGkC,UAAYlC,EAAGkC,UAAY,cAItCuB,eAAiB,SAACnC,GACd,OACIoC,EAAAhJ,EAAAiJ,cAAA,WACID,EAAAhJ,EAAAiJ,cAAA,WAAMrC,EAAI,QAAQ,OAAlB,SACAoC,EAAAhJ,EAAAiJ,cAAA,gBACID,EAAAhJ,EAAAiJ,cAAA,2BACAD,EAAAhJ,EAAAiJ,cAAA,UAAQC,QAAS,kBAAMzI,EAAKoH,QAAQjB,KAApC,OACAoC,EAAAhJ,EAAAiJ,cAAA,UAAQC,QAAS,kBAAMzI,EAAKgI,QAAQ7B,KAApC,6FAjKZlG,KAAKuG,IAAM,IAAIzG,EACfE,KAAKwG,SAAS,qCAuKT,IAAAiC,EAAAzI,KAAA0I,EACmC1I,KAAK8F,MAAtC1F,EADFsI,EACEtI,MAAOgG,EADTsC,EACStC,OAAQD,EADjBuC,EACiBvC,OAAQE,EADzBqC,EACyBrC,OAC1Be,EAAS,GAIb,OAHAnH,OAAO4E,OAAOzE,GAAOO,QAAQ,SAAAiE,GAAE,OAAIwC,EAAOnH,OAAAS,EAAA,EAAAT,CAAI,IAAIQ,IAAJ,GAAAoG,OAAA5G,OAAAS,EAAA,EAAAT,CAAYmH,GAAZnH,OAAAS,EAAA,EAAAT,CAAuB2E,QACrEwC,EAASA,EAAO3C,KAAKzE,KAAKsH,YAGtBgB,EAAAhJ,EAAAiJ,cAAA,OAAKzB,UAAU,OAEPT,GAEIiC,EAAAhJ,EAAAiJ,cAAA,OAAKtC,GAAG,eACJqC,EAAAhJ,EAAAiJ,cAAA,UACID,EAAAhJ,EAAAiJ,cAAA,gBAAOD,EAAAhJ,EAAAiJ,cAAA,uBAAP,sCAA2DD,EAAAhJ,EAAAiJ,cAAA,qBAA3D,gBACAD,EAAAhJ,EAAAiJ,cAAA,gBAAOD,EAAAhJ,EAAAiJ,cAAA,uBAAP,uCAA4DD,EAAAhJ,EAAAiJ,cAAA,sBAA5D,iBACAD,EAAAhJ,EAAAiJ,cAAA,WACAD,EAAAhJ,EAAAiJ,cAAA,gBAAOD,EAAAhJ,EAAAiJ,cAAA,qBAAP,iHACAD,EAAAhJ,EAAAiJ,cAAA,gBAAOD,EAAAhJ,EAAAiJ,cAAA,wBAAP,gDACAD,EAAAhJ,EAAAiJ,cAAA,WACAD,EAAAhJ,EAAAiJ,cAAA,gBAAOD,EAAAhJ,EAAAiJ,cAAA,gBAAP,QAAsBD,EAAAhJ,EAAAiJ,cAAA,uDAAtB,mEACAD,EAAAhJ,EAAAiJ,cAAA,gBAAOD,EAAAhJ,EAAAiJ,cAAA,kBAAP,yEAKhBD,EAAAhJ,EAAAiJ,cAAA,OAAKtC,GAAG,SAAS0C,MAAM,4EAA2EL,EAAAhJ,EAAAiJ,cAAA,OAAKK,IAAI,oBAAoBC,IAAKC,OACpIR,EAAAhJ,EAAAiJ,cAAA,OAAKtC,GAAG,OAAOa,UAAU,WAAW0B,QAAS,kBAAMC,EAAKjC,SAAS,SAAAV,GAAK,MAAK,CAACO,QAASP,EAAMO,YAA3F,KACAiC,EAAAhJ,EAAAiJ,cAAA,OAAKtC,GAAG,QAAQa,UAAU,WAAW0B,QAASxI,KAAKsG,OAAnD,OACAgC,EAAAhJ,EAAAiJ,cAAA,OAAKtC,GAAG,MAAMa,UAAU,WAAW0B,QAASxI,KAAKkF,KAAjD,OACAoD,EAAAhJ,EAAAiJ,cAAA,WACID,EAAAhJ,EAAAiJ,cAAA,OAAKzB,UAAU,qBAAqB9G,KAAKqI,eAAe,IACxDC,EAAAhJ,EAAAiJ,cAAA,OAAKzB,UAAU,sBAAsB9G,KAAKqI,eAAe,KAE7DC,EAAAhJ,EAAAiJ,cAAA,WACID,EAAAhJ,EAAAiJ,cAAA,OAAKzB,UAAU,aAEP7G,OAAOqD,KAAKlD,GAAO4E,IAAI,SAACJ,EAAIgB,GACxB,OAAO0C,EAAAhJ,EAAAiJ,cAAA,OAAKC,QAASC,EAAKR,OAAQhC,GAAE,IAAAY,OAAMjC,GAAMkC,UAAS,IAAAD,OAAMjC,EAAN,aAAqBmE,IAAKnE,GAAKA,MAIpG0D,EAAAhJ,EAAAiJ,cAAA,OAAKzB,UAAU,cAEPM,EAAOpC,IAAI,SAACJ,EAAIgB,GACZ,OAAO0C,EAAAhJ,EAAAiJ,cAAA,OAAKC,QAASC,EAAKR,OAAQhC,GAAE,IAAAY,OAAMjC,GAAMkC,UAAS,IAAAD,OAAMjC,EAAN,aAAqBmE,IAAKnE,GAAKA,MAKhG3E,OAAOqD,KAAKlD,GAAO4E,IAAI,SAAAJ,GACnB,OACI0D,EAAAhJ,EAAAiJ,cAAA,OAAKQ,IAAG,QAAAlC,OAAUjC,GAAM4D,QAASC,EAAKxB,YAE9B7G,EAAMwE,GAAII,IAAI,SAAAgD,GACV,OAAOM,EAAAhJ,EAAAiJ,cAACS,EAAA1J,EAAD,CAAQwH,UAAS,GAAAD,OAAKjC,EAAL,KAAAiC,OAAWmB,EAAX,UAAwBe,IAAG,GAAAlC,OAAKjC,EAAL,KAAAiC,OAAWmB,GAAO3C,KAAI,IAAAwB,OAAMjC,GAAMqE,GAAE,IAAApC,OAAMmB,GAAOkB,YAAa/C,EAAQgD,YAAa/C,EAAQgD,YAAa,EAAGC,WAAW,QAAQC,SAAS,uBA9OpNC,aCJlBC,IAASC,OAAOnB,EAAAhJ,EAAAiJ,cAACmB,EAAD,MAAS/C,SAASyB,eAAe,4BCJjDuB,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b82cda1f.chunk.js","sourcesContent":["const graphData = {\r\n    \"a\": [1],\r\n    \"b\": [1, 2],\r\n    \"c\": [1, 2],\r\n    \"d\": [2, 3, 4],\r\n    \"e\": [3, 4],\r\n    \"f\": [4, 5, 6],\r\n    \"g\": [5, 6, 7],\r\n    \"h\": [8]\r\n}\r\n\r\nexport default graphData;","import graphData from './data';\r\n\r\n/**\r\n * @class MBB - Maximum Matching BipartiteGraph\r\n */\r\nexport default class MMB {\r\n\r\n    constructor(){\r\n        this.setGraph();\r\n    }\r\n    \r\n    /**\r\n     * BFS on bipartite graph with considering alternating paths\r\n     */\r\n    bfs = (graph, matching, nodes) => {\r\n        \r\n        const layers = []\r\n        let layer = new Set();\r\n        [...(nodes[0])].forEach(vertex => {      \r\n            // \r\n            if (!matching[vertex]){\r\n                layer.add(vertex)\r\n            }\r\n        })\r\n        layers.push(layer)\r\n        \r\n        let visited = new Set()\r\n        \r\n        while (true){\r\n            layer = layers[layers.length-1];\r\n            let new_layer = new Set()\r\n            \r\n            const layer_entries = layer.entries()\r\n            \r\n            for (let vertex of layer_entries){\r\n                vertex = vertex[1]\r\n                \r\n                visited.add(vertex)\r\n                const graph_vertex_entries = graph[vertex].entries()\r\n                if (nodes[0].has(vertex)){\r\n                    for (let neighbour of graph_vertex_entries){\r\n                        neighbour=neighbour[1];\r\n                        if (!visited.has(neighbour) && (!matching[vertex] || neighbour != matching[vertex])){\r\n                            new_layer.add(neighbour)\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    for (let neighbour of graph_vertex_entries){\r\n                        neighbour=neighbour[1];\r\n                        if (!visited.has(neighbour) && (matching[vertex] && neighbour == matching[vertex])){\r\n                            new_layer.add(neighbour)\r\n                        }\r\n                    }        \r\n                }\r\n            }\r\n            \r\n            \r\n            layers.push(new_layer)\r\n            \r\n\r\n            if (new_layer.size == 0){                \r\n                return layers\r\n            }\r\n            \r\n            const new_layer_entries = new_layer.entries();\r\n            \r\n            // \r\n            for (let vertex of new_layer_entries){\r\n                vertex = vertex[1];\r\n                \r\n                \r\n                if([...(nodes[1])].includes(vertex) && !([...Object.keys(matching)].includes(String(vertex)))){\r\n                    \r\n                    return layers\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * DFS on bipartite graph with considering alternating paths\r\n     */\r\n    dfs = (graph, v, index, layers, dfs_parent, dfs_paths, matching, nodes) => {        \r\n        \r\n        if (index == 0){\r\n            const path = [v]\r\n            while (dfs_parent[v] != v){\r\n                path.push(dfs_parent[v])\r\n                v = dfs_parent[v]\r\n            }            \r\n            dfs_paths.push(path)\r\n            \r\n            \r\n            return true\r\n        }\r\n        \r\n        const graph_v_entries = graph[v].entries();\r\n        for (let neighbour of graph_v_entries){\r\n            neighbour = neighbour[1]\r\n            \r\n            if (layers[index - 1].has(neighbour)){\r\n                if (dfs_parent[neighbour]) continue\r\n                if ((nodes[0].has(neighbour) && (!matching[v] || neighbour != matching[v])) ||\r\n                        (nodes[1].has(neighbour) && (matching[v] && neighbour == matching[v]))){\r\n                            dfs_parent[neighbour] = v\r\n                            // \r\n                            \r\n                            if (this.dfs(graph, neighbour, index-1, layers, dfs_parent, dfs_paths, matching, nodes)){\r\n                                return true\r\n                            }\r\n                        }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * set the graph data\r\n     */\r\n    setGraph = (data=graphData) => {\r\n        this.graph = {};\r\n        \r\n        const shuffle = (list) => {\r\n            return list.sort(() => Math.random() - 0.5)\r\n        }\r\n\r\n        Object.keys(data).forEach(el => this.graph[[el]] = new Set(data[el]))\r\n        this.nodes = [\r\n            new Set([...shuffle(Object.keys(this.graph))]),\r\n            new Set(shuffle(Object.values(data).join(\",\").split(\",\").map(el => parseInt(el, 10))))\r\n        ]\r\n        \r\n        this.nodes[0].forEach(vertex => {\r\n            this.graph[vertex].forEach(neighbour => {\r\n                this.graph[neighbour] = (this.graph[neighbour]?this.graph[neighbour].add(vertex):new Set([vertex]));\r\n            });\r\n        });        \r\n    }\r\n    \r\n    /**\r\n     * do the algorithms\r\n     */\r\n    run = () => {\r\n        \r\n        const matching = {};\r\n        let layers = [];\r\n        let free_vertex = null;\r\n        \r\n        while (true){\r\n            layers = this.bfs(this.graph, matching, this.nodes);                        \r\n            \r\n\r\n            if (layers[layers.length-1].size === 0) break;\r\n            free_vertex = new Set([...Array.from(layers[layers.length-1]).filter(vertex => !matching[vertex]?vertex:\"\")])\r\n            \r\n            const dfs_paths = [];\r\n            const dfs_parent = {};\r\n            \r\n            const free_vertex_entries = free_vertex.entries();\r\n            for (let vertex of free_vertex_entries) {\r\n                vertex = vertex[1]\r\n                \r\n                dfs_parent[vertex] = vertex;\r\n                \r\n                this.dfs(this.graph, vertex, (layers.length-1), layers, dfs_parent, dfs_paths, matching, this.nodes);\r\n            }            \r\n            \r\n            if (dfs_paths.length === 0) break\r\n            for (let path in dfs_paths){\r\n                \r\n                for (let i in [...Array(dfs_paths[path].length).keys()]){\r\n                    i = parseInt(i);\r\n                    \r\n                    if (i % 2 === 0){\r\n                        matching[dfs_paths[path][i]] = dfs_paths[path][i+1]\r\n                        matching[dfs_paths[path][i+1]] = dfs_paths[path][i]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return matching;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport graphData from './data';\nimport MMB from './maxMatchingBi';\nimport LineTo from 'react-lineto';\nimport forkme from './forkme.png';\n\n\nclass App extends Component {\n\n    state = {\n        graph: graphData,\n        matching: {},\n        active: {\n            val: \"\",\n            id: -1,\n            dir: \"\",\n        },\n        bcolor: \"#77cec8\",\n        bstyle: \"solid\",\n        isHelp: false,\n    }\n\n    componentDidMount(){\n        this.mmb = new MMB();\n        this.setState({});\n    }\n    \n    run = () => {\n        this.clear();\n        this.mmb.setGraph(this.state.graph)\n        this.setState({\n            matching: this.mmb.run(),\n            bcolor: \"#fff\",\n        }, () => {\n            const {matching} = this.state; \n            Object.keys(matching).forEach(el => {\n                if(!isNaN(parseInt(el, 10))){\n                    const line = document.getElementsByClassName(`${matching[el]}-${el}`)[0];\n                    line.className = line.className + \" lineActive\"\n                }\n            })\n        });\n    }\n\n    clear = () => {\n        this.setState({matching: {}, bcolor: \"#77cec8\"});\n        const els = document.getElementsByClassName(\"lineActive\");\n        Array.from(els).forEach(el => {\n            el.className=el.className.replace(/(.*) lineActive/, \"$1\");\n        })\n    }\n        \n    removeLine = e => {\n        const c = e.target.className.replace(/(.*) lines/, \"$1\").split(\"-\");\n        const {graph} = this.state;\n        graph[c[0]] = graph[c[0]].filter(el => (el===parseInt(c[1], 10))?\"\":el);\n        this.setState({graph}, () => {\n            this.clear();\n        })\n    }\n\n    addNode = (dir) => {\n        const {graph} = this.state;\n        if(!dir){\n            const len = Object.keys(graph).length;\n            const last = [...Object.keys(graph)][len-1];\n            let name = last;\n            const i = last.length-1;\n            if(last[i] < \"z\"){\n                name = name.replace(/(.*).$/, \"$1\") + String.fromCharCode(name.charCodeAt(i) + 1);\n            }\n            else{\n                name = name + \"a\";\n            }\n            graph[name] = [];\n            this.setState({graph}, () => {\n                this.clear();\n            });\n        }\n        else{\n            \n            let rights = [];\n            Object.values(graph).forEach(el => rights=[...new Set([...rights, ...el])])\n            rights = rights.sort(this.sortNumber);\n            const len = rights.length;\n            const last = rights[len-1];\n            let name = last;\n            name = parseInt(name, 10) + 1;\n            \n            // get last node in the left side\n            const leftLen = Object.keys(graph).length;\n            const leftName = [...Object.keys(graph)][leftLen-1];\n            console.log([...graph[leftName], name]);\n            graph[leftName] = [...graph[leftName], name];\n            this.setState({graph}, () => {\n                this.clear();\n            });\n        }\n    }\n    \n    sortNumber = (a, b) => {\n        return a-b;\n    }\n    \n    delNode = (dir) => {\n        const {graph} = this.state;\n        if(!dir){\n            const len = Object.keys(graph).length;\n            if(len===1) return;\n            delete graph[Object.keys(graph)[len-1]];\n            this.setState({graph}, () => {\n                this.clear();\n            });\n        }\n        else{\n            let rights = [];\n            Object.values(graph).forEach(el => rights=[...new Set([...rights, ...el])])\n            rights = rights.sort(this.sortNumber);\n            const len = rights.length;\n            if(len===1) return;\n            const name = rights[len-1];\n            Object.keys(graph).map(el => graph[el]=graph[el].filter(ell => ell==name?\"\":ell))\n            this.setState({graph}, () => {\n                this.clear();\n            });\n        }\n\n    }\n\n    handle = (e) => {\n        const {active} = this.state;\n        const val = e.target.innerHTML\n        const id = e.target.id\n        const dir = isNaN(parseInt(val, 10))?0:1;\n        if (active.id!==-1){\n            const el = document.getElementsByClassName(\"active\")[0];\n            el.className = el.className.replace(/(.*) active/, \"$1\");\n            if(!dir){\n                this.setState({\n                    active: {\n                        val: \"\",\n                        id: -1,\n                        dir: \"\",\n                    },\n                })\n                return;\n            }\n            this.clear();\n            const {graph} = this.state;\n            const newGraph = {}; \n            Object.keys(graph).map(el => {\n                if(active.val == el){\n                    newGraph[el] = [...new Set([...graph[el], parseInt(val, 10)])];\n                }\n                else {\n                    newGraph[el] = graph[el]\n                }\n            });\n            this.setState({\n                active: {\n                    val: \"\",\n                    id: -1,\n                    dir: \"\",\n                },\n                graph: newGraph,\n            })\n        }\n        else{\n            if(dir){\n                return;\n            }\n            this.setState({active: {dir, id, val}});\n            const el = document.getElementById(e.target.id);\n            el.className = el.className + \" active\"\n        }\n    }\n\n    handlerSection = (dir) => {\n        return (\n            <div>\n                <div>{dir?\"RIGHT\":\"LEFT\"} NODE</div>\n                <fieldset>\n                    <legend>At Bottom</legend>\n                    <button onClick={() => this.addNode(dir)}>ADD</button>\n                    <button onClick={() => this.delNode(dir)}>DEL</button>\n                </fieldset>\n\n            </div>\n        );\n    }\n\n    render() {\n        const {graph, bstyle, bcolor, isHelp} = this.state;\n        let rights = [];\n        Object.values(graph).forEach(el => rights=[...new Set([...rights, ...el])])\n        rights = rights.sort(this.sortNumber);\n        \n        return (\n            <div className=\"App\">\n                {\n                    isHelp &&\n                    (\n                        <div id=\"help-dialog\">\n                            <ul>\n                                <li>To <b>Add/Delete</b> Left Nodes: Use The Button At The <b>Top-Left</b> (Light Red)</li>\n                                <li>To <b>Add/Delete</b> Right Nodes: Use The Button At The <b>Top-Right</b> (Light Blue)</li>\n                                <br/>\n                                <li>To <b>Add Line</b>: Click One of The Left Nodes (Light Red) And Then Click The Intended Right Node (Light Blud) [Left -> Right]</li>\n                                <li>To <b>Delete Line</b>: Just Click The Line You Want To Be Removed</li>\n                                <br/>\n                                <li>To <b>Run</b> The <b>Maximum Matching Bipartite Graph Algorithm</b> (Hopcroft-Karp): Just Click The RUN Button At The Bottom-Right</li>\n                                <li>To <b>Clear</b> The Running Results: Just Click The CLR Button At The Bottom-Right</li>\n                            </ul>\n                        </div>\n                    )\n                }\n                <div id=\"forkme\" title=\"This Is `Private` Till Being Represented To Dr. Farnaz Sheikhi @ K.N.T.U\"><img alt=\"fork-me-on-github\" src={forkme} /></div>\n                <div id=\"help\" className=\"noselect\" onClick={() => this.setState(state => ({isHelp: !state.isHelp}))}>?</div>\n                <div id=\"clear\" className=\"noselect\" onClick={this.clear}>CLR</div>\n                <div id=\"run\" className=\"noselect\" onClick={this.run}>RUN</div>\n                <div>\n                    <div className=\"lefthandle handle\">{this.handlerSection(0)}</div>\n                    <div className=\"righthandle handle\">{this.handlerSection(1)}</div>\n                </div>\n                <div>\n                    <div className=\"left node\">\n                        {\n                            Object.keys(graph).map((el, i) => {\n                                return <div onClick={this.handle} id={`l${el}`} className={`l${el} noselect`} key={el}>{el}</div>\n                            })\n                        }\n                    </div>\n                    <div className=\"right node\">\n                        {\n                            rights.map((el, i) => {\n                                return <div onClick={this.handle} id={`r${el}`} className={`r${el} noselect`} key={el}>{el}</div>\n                            })\n                        }\n                    </div>\n                    {\n                        Object.keys(graph).map(el => {\n                            return (\n                                <div key={`line-${el}`} onClick={this.removeLine}>\n                                    {\n                                        graph[el].map(ell => {\n                                            return <LineTo className={`${el}-${ell} lines`} key={`${el}-${ell}`} from={`l${el}`} to={`r${ell}`} borderColor={bcolor} borderStyle={bstyle} borderWidth={4} fromAnchor=\"right\" toAnchor=\"left\" />\n                                        })\n                                    }\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/forkme.2b7a3655.png\";"],"sourceRoot":""}