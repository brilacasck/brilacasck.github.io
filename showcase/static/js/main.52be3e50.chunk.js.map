{"version":3,"sources":["logo.png","components/Header/Header.jsx","components/Footer/Footer.jsx","components/showcaseList/ShowcaseCard.jsx","components/showcaseList/ShowcaseList.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","src","logo","className","alt","href","role","aria-label","Footer","showcaseCard","props","showcase","cover","title","url","screenshot","desc","technologies","partners","Card","Img","variant","Body","Title","Text","ListGroup","ListGroupItem","join","map","p","key","name","slug","Link","Button","showcaseList","showcases","Container","fluid","Row","sc","Col","xs","sm","md","lg","xl","App","useState","setShowcases","a","fetch","res","status","json","useEffect","fetchData","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,sPCG5B,SAASC,IACtB,OACE,6BACE,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzC,mCACO,2CADP,qDAGA,uBACED,UAAU,WACVE,KAAK,yBAFP,aAMA,6BACA,uBAAGA,KAAK,SAAQ,0BAAMC,KAAK,MAAMC,aAAW,WAA5B,YCfP,SAASC,IACtB,OACE,+F,gECKW,SAASC,EAAaC,GAAQ,IACnCC,EAAaD,EAAbC,SACDC,EAA+DD,EAA/DC,MAAOC,EAAwDF,EAAxDE,MAAOC,EAAiDH,EAAjDG,IAAKC,EAA4CJ,EAA5CI,WAAYC,EAAgCL,EAAhCK,KAAMC,EAA0BN,EAA1BM,aAAcC,EAAYP,EAAZO,SAC1D,OACE,yBAAKf,UAAU,iBACb,kBAACgB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMpB,IAAKW,IAC7B,kBAACO,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KAAaV,GACb,kBAACM,EAAA,EAAKK,KAAN,KACGR,IAGL,kBAACS,EAAA,EAAD,CAAWtB,UAAU,oBACnB,kBAACuB,EAAA,EAAD,KACE,8CACA,yBAAKvB,UAAU,gBAAgBc,EAAaU,KAAK,QAEnD,kBAACD,EAAA,EAAD,KACE,0CACA,6BACGR,EAASU,KAAI,SAACC,GAAD,OAAO,yBAAKC,IAAKD,EAAEE,MAAM,uBAAG1B,KAAI,kCAA6BwB,EAAEG,OAASH,EAAEE,aAI9F,kBAACZ,EAAA,EAAKG,KAAN,KAEIR,GACA,kBAACK,EAAA,EAAKc,KAAN,CAAW5B,KAAMS,GACf,kBAACoB,EAAA,EAAD,CAAQb,QAAQ,gBAAhB,gBAGJ,kBAACF,EAAA,EAAKc,KAAN,CAAW5B,KAAMU,GACf,kBAACmB,EAAA,EAAD,CAAQb,QAAQ,gBAAhB,mB,MCjCG,SAASc,EAAazB,GAAQ,IACnC0B,EAAc1B,EAAd0B,UACR,OACE,yBAAKjC,UAAU,iBACb,kBAACkC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,MAEKH,GAAa,IAAIR,KAAI,SAACY,GAAD,OAAQ,kBAACC,EAAA,EAAD,CAAKX,IAAKU,EAAG3B,MAAO6B,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG,kBAAC,EAAD,CAAcnC,SAAU6B,W,MCU5GO,MAlBf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNZ,EADM,KACKa,EADL,iDAEb,4BAAAC,EAAA,sEACkBC,MAAM,wBADxB,UAEkB,OADZC,EADN,QAESC,OAFT,iEAGcD,EAAIE,OAHlB,OAGEF,EAHF,OAIEH,EAAaG,GAJf,4CAFa,sBASb,OADAG,qBAAU,YARG,mCAQIC,KAAc,IAE7B,yBAAKrD,UAAU,OACb,4BAAQA,UAAU,cAAa,kBAACH,EAAD,OAC/B,0BAAMyD,GAAG,QAAO,kBAAC,EAAD,CAAcrB,UAAWA,KACzC,4BAAQjC,UAAU,cAAa,kBAACK,EAAD,SCTjBkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52be3e50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1b338e46.png\";","import React from 'react';\nimport logo from '../../logo.png';\n\nexport default function Header() {\n  return (\n    <div>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        Some <code>Showcases</code> are private, hence They'll not be attached here!\n        </p>\n      <a\n        className=\"App-link\"\n        href=\"https://brilacasck.ir\"\n      >\n        Back Home\n      </a>\n      <hr />\n      <a href=\"#main\"><span role=\"img\" aria-label=\"go-down\">⮟</span></a>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Footer() {\n  return (\n    <div>\n      © 2017-2020 Brilacasck TEAM (~blilac). All rights reserved.\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport Button from 'react-bootstrap/Button';\n\nimport './ShowcaseCard.scss';\n\nexport default function showcaseCard(props) {\n  const { showcase } = props;\n  const {cover, title, url, screenshot, desc, technologies, partners} = showcase;\n  return (\n    <div className=\"showcase-card\">\n      <Card>\n        <Card.Img variant=\"top\" src={cover} />\n        <Card.Body>\n          <Card.Title>{title}</Card.Title>\n          <Card.Text>\n            {desc}\n          </Card.Text>\n        </Card.Body>\n        <ListGroup className=\"list-group-flush\">\n          <ListGroupItem>\n            <div>Technologies:</div>\n            <div className=\"technologies\">{technologies.join(\", \")}</div>\n          </ListGroupItem>\n          <ListGroupItem>\n            <div>Partners:</div>\n            <div>\n              {partners.map((p) => <div key={p.name}><a href={`https://about.blilac.ir/${p.slug}`}>{p.name}</a></div>)}\n            </div>\n          </ListGroupItem>\n        </ListGroup>\n        <Card.Body>\n          {\n            url &&\n            <Card.Link href={url}>\n              <Button variant=\"outline-dark\">Source Code</Button>\n            </Card.Link>\n          }\n          <Card.Link href={screenshot}>\n            <Button variant=\"outline-info\">Project URL</Button>\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\nshowcaseCard.propTypes = {\n  showcase: PropTypes.shape({\n    cover: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    technologies: PropTypes.arrayOf(PropTypes.string).isRequired,\n    partners: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      slug: PropTypes.string.isRequired,\n    })).isRequired\n  }),\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ShowcaseCard from './ShowcaseCard';\n\nimport './ShowcaseList.scss';\n\nexport default function showcaseList(props) {\n  const { showcases } = props;  \n  return (\n    <div className=\"showcase-list\">\n      <Container fluid>\n        <Row>\n          {\n            (showcases || []).map((sc) => <Col key={sc.title} xs={12} sm={12} md={6} lg={4} xl={3}><ShowcaseCard showcase={sc} /></Col>)\n          }\n        </Row>\n      </Container>\n    </div>\n  );\n}\nshowcaseList.propTypes = {\n  showcases: PropTypes.arrayOf(PropTypes.shape({\n    cover: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    desc: PropTypes.string.isRequired,\n    technologies: PropTypes.arrayOf(PropTypes.string).isRequired,\n    partners: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      slug: PropTypes.string.isRequired,\n    })).isRequired\n  })),\n}\n","import React, {useEffect, useState} from 'react';\nimport Header from './Header/Header';\nimport Footer from './Footer/Footer';\nimport ShowcaseList from './showcaseList/ShowcaseList';\n\nimport './App.scss';\n\n\nfunction App() {\n  const [showcases, setShowcases] = useState([]);\n  async function fetchData() {\n    let res = await fetch('/data/showcases.json');\n    if(res.status!==200) return;\n    res = await res.json();\n    setShowcases(res)\n  }\n  useEffect(() => {fetchData()}, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"><Header/></header>\n      <main id=\"main\"><ShowcaseList showcases={showcases} /></main>\n      <footer className=\"App-footer\"><Footer/></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}